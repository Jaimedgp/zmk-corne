/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <400>;
};

/ {
        chosen {
          zmk,matrix_transform = &five_column_transform;
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            config_layer_5 {
                if-layers = <1 2>;
                then-layer = <5>;
            };
            config_layer_6 {
                if-layers = <3 4>;
                then-layer = <6>;
            };
        };
        behaviors {
            td0: tap_dance_0 {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <300>;
                bindings = <&lt 2 BSPC>, <&kp BSPC>, <&kp BSPC>;
            };
            tdm: tap_dance_mouse {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&to 0>, <&to 6>;
            };
        };
        macros {
          es_n: spanish_n {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp TILDE &kp N>
                ;
            };
          tsk: task {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp MINUS &kp SPC &kp LBKT &kp SPC &kp RBKT &kp SPC>
                ;
            };
          cllout: callout {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp GT &kp SPC &kp LBKT &kp EXCL &kp N &kp O &kp T &kp E &kp RBKT &kp SPC>
                ;
            };
          d_ln: double_underline {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp UNDER &kp UNDER>
                ;
            };
          und_indt: undo_indent {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHFT>,
                      <&macro_tap &kp LBKT>,
                      <&macro_release &kp LCTRL &kp LSHFT>
                ;
            };
          indt: indent {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHFT>,
                      <&macro_tap &kp RBKT>,
                      <&macro_release &kp LCTRL &kp LSHFT>
                ;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |xxx|  Y  |  U   |  I  |  O  | MOUSE |
// |  A  |  S  |  D  |  F  |  G  |xxx|  H  |  J   |  K  |  L  |  A[P] |
// |  Z  |  X  |  C  |  V  |  B  |xxx|  N  |  M   |  ,  |  .  |   ñ   |
//    | CTRL,DEL | 1,TAB | 3,ENT |xxx| 4,SPC | 2,BCKSPC | SHFT,ESC |
// -----------------------------------------------------------------------------------------
                        bindings = <
       &kp Q &kp W &kp E &kp R &kp T         &kp Y &kp U  &kp I     &kp O   &tdm
       &kp A &kp S &kp D &kp F &kp G         &kp H &kp J  &kp K     &kp L   &mt LALT P
       &kp Z &kp X &kp C &kp V &kp B         &kp N &kp M  &kp COMMA &kp DOT &es_n
       &mt LCTRL DEL &lt 1 TAB &lt 3 RET     &lt 4 SPC &td0 &mt LSHIFT ESC
                        >;
                };
                pairs_layer {
// -----------------------------------------------------------------------------------------
// |  `  |  ´  |  [   |  ]   |  ~  |xxx|     | TASK | CLLOUT |  D_  |     |
// |  <  |  >  |  (   |  )   |  ?  |xxx|     |      |        |      |_____|
// |     |  "  |  {   |  }   |  ¿  |xxx|     | G(1) |  G(2)  | G(3) |     |
//              |______|_____|_____|xxx|_____|______|______|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &kp GRAVE  &kp SQT  &kp LBKT  &kp RBKT  &kp TILDE         &none  &tsk        &cllout     &d_ln       &none
   &kp LT     &kp GT   &kp LPAR  &kp RPAR  &kp QMARK         &none  &none       &none       &none       &trans
   &none      &kp DQT  &kp LBRC  &kp RBRC  &kp RA(FSLH)      &none  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &none
                           &trans  &trans  &trans            &trans  &trans  &trans
                        >;
                };
                arrows_layer {
// ----------------------------------------------------------------------------------------
// |      |      |     |         |         |xxx| HOME |   PGDWN   |    PGUP   |  END  |     |
// | SHFT | CTRL | GUI |   ALT   | C(S(-)) |xxx| LEFT |   DOWN    |     UP    | RIGHT |_____|
// |      |      |     | PrntScr |         |xxx|      | [SCRLL_D] | [SCRLL_U] |       |     |
//                      |______|_____|_____|xxx|______|_____|_____|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &none      &none      &none     &none      &none                  &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &none
   &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT   &kp LC(LS(MINUS))      &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
   &none      &none      &none     &kp PSCRN  &none                  &none      &none      &none      &none      &none
                           &trans  &trans     &trans                 &trans  &trans  &trans
                        >;
                };
                symbols_layer {
// -----------------------------------------------------------------------------------------
// |     |  %  |  @  |  '  |  _  |xxx|  ^  |  =  |  #  |  |  |      |
// |     |  !  |  /  |  "  |  -  |xxx|  *  |  :  |  +  |  \  | A[;] |
// |     |     |  ~  |  $  |     |xxx|     |  &  |  ´  |     |      |
//            |______|_____|_____|xxx|_____|_____|_____|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &none  &kp PRCNT  &kp AT             &kp RA(SQT)   &kp UNDER       &kp CARET  &kp EQUAL  &kp HASH       &kp PIPE  &none
   &none  &kp EXCL   &kp FSLH           &kp RA(DQT)   &kp MINUS       &kp ASTRK  &kp COLON  &kp PLUS       &kp NUBS  &mt LALT P
   &none  &none      &kp RS(RA(TILDE))  &kp DLLR      &none           &none      &kp AMPS   &kp RA(GRAVE)  &none     &kp SEMI
                                      &trans  &trans  &trans          &trans  &trans  &trans
                        >;
                };
                numpad_layer {
// -----------------------------------------------------------------------------------------
// |  F3  |  F6  |  F9  |  F12 |  F15 |xxx|  .  |  7  |  8  |  9  |  *   |
// |  F2  |  F5  |  F8  |  F11 |  F14 |xxx|  0  |  4  |  5  |  6  | A[/] |
// |  F1  |  F4  |  F7  |  F10 |  F13 |xxx|  -  |  1  |  2  |  3  |  +   |
//                 |______|_____|_____|xxx|_____|_____|_____|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &kp F3  &kp F6  &kp F9  &kp F12  &kp F15           &kp DOT    &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY
   &kp F2  &kp F5  &kp F8  &kp F11  &kp F14           &kp N0     &kp N4  &kp N5  &kp N6  &mt LALT FSLH
   &kp F1  &kp F4  &kp F7  &kp F10  &kp F13           &kp MINUS  &kp N1  &kp N2  &kp N3  &kp KP_PLUS
                    &trans  &trans  &trans            &trans  &trans  &trans
                        >;
                };
                config_layer {
// -----------------------------------------------------------------------------------------
// |        |      |    | BT_N   |       |xxx|      | VOL_U  | MED_N   | BRI_U  |   |
// | U-INDT | INDT |    | OUT_T  | CLEAR |xxx| LOCK | VOL_M  | MED_PP  |        |___|
// |        |      |    | BT_P   |       |xxx|      | VOL_D  | MED_P   | BRI_D  |   |
//                        |____|____|____|xxx|____|____|____|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &none      &none  &none  &bt BT_NXT    &none             &none      &kp K_VOL_UP  &kp K_NEXT  &kp C_BRI_UP  &none
   &und_indt  &indt  &none  &out OUT_TOG  &bt BT_CLR        &kp LG(L)  &kp K_MUTE    &kp K_PP    &none         &trans
   &none      &none  &none  &bt BT_PRV    &none             &none      &kp K_VOL_DN  &kp K_PREV  &kp C_BRI_DN  &none
                      &trans  &trans  &trans            &trans  &trans  &trans
                        >;
                };
                more_layer {
// -----------------------------------------------------------------------------------------
// |    |     |      | SP_PASTE |     |xxx|      |    |    |    | MOUSE |
// |    | CUT | COPY |  PASTE   |     |xxx|      |    |    |    |_______|
// |    |     |      | SP_PASTE |     |xxx|      |    |    |    |       |
//                     |____|____|____|xxx|____|____|____|
// -----------------------------------------------------------------------------------------
                        bindings = <
   &none  &none         &none          &kp LC(LS(V))   &none         &none  &none  &none  &none    &tdm
   &none  &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_PASTE  &none         &none  &none  &none  &none    &trans
   &none  &none         &none          &kp LC(LA(V))   &none         &none  &none  &none  &none    &none
                                       &trans  &trans  &trans        &trans  &trans  &trans
                        >;
                };
        };
};
